plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.itadviser'
version = '1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'org.liquibase:liquibase-core'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport  // Generate report after tests
    systemProperty 'spring.profiles.active', 'test'  // Activate test profile
}


jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }

    // Add this to ensure report is generated even if tests fail
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/model/**',        // Exclude model classes
                    '**/entity/**',       // Exclude entity classes
                    '**/config/**',       // Exclude configuration classes
                    '**/Main.class'      // Exclude main class
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
            excludes = [
                    'com.itadviser.model.*',
                    'com.itadviser.entity.*',
                    'com.itadviser.config.*',
                    'com.itadviser.Main'
            ]
        }
    }
}

// Add a task to print the location of the JaCoCo report
task printJacocoReportLocation {
    doLast {
        println "JaCoCo report location: ${project.buildDir}/reports/jacoco/test/html/index.html"
    }
}

test.finalizedBy printJacocoReportLocation